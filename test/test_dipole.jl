using DDA, Test


alpha = 1.0e-04 * (0.8639 + 0.2599im)
k = 6.283185307179586

r = [
    [0, 0, 0],
    [1, 1, 1]
]

Ajk_exp = [
    1.71006105686162 + 15.0987189646511im 1.24771766013322 - 7.59383349109870im 1.24771766013322 - 7.59383349109870im;
    1.24771766013322 - 7.59383349109870im 1.71006105686162 + 15.0987189646511im 1.24771766013322 - 7.59383349109870im;
    1.24771766013322 - 7.59383349109870im 1.24771766013322 - 7.59383349109870im 1.71006105686162 + 15.0987189646511im;
]

Ajk = DDA.calc_Ajk(k, r[1], r[2])
@test isapprox(Ajk, Ajk_exp; rtol=1e-4)

Akj = DDA.calc_Ajk(k, r[2], r[1])
@test isapprox(Ajk, Akj; rtol=1e-4)



Ajj_exp = [
    10614.7014265967 - 3193.37990597579im 0.00000000000000 + 0.00000000000000im 0.00000000000000 + 0.00000000000000im;
    0.00000000000000 + 0.00000000000000im 10614.7014265967 - 3193.37990597579im 0.00000000000000 + 0.00000000000000im;
    0.00000000000000 + 0.00000000000000im 0.00000000000000 + 0.00000000000000im 10614.7014265967 - 3193.37990597579im;
]
Ajj = DDA.calc_Ajj(alpha)
@test isapprox(Aj, Aj_exp; rtol=1e-4)




k = 6.283185307179586

r = [[0, 0, 0],
    [1, 1, 1]]

alph = 1.0e-04 * [
        0.8639 + 0.2599im,
        0.8639 + 0.2599im,
    ]

A_exp = [
    10614.70 - 3193.380im 0.000000 + 0.000000im 0.000000 + 0.000000im 1.710061 + 15.09872im 1.247718 - 7.593833im 1.247718 - 7.593833im;
    0.000000 + 0.000000im 10614.70 - 3193.380im 0.000000 + 0.000000im 1.247718 - 7.593833im 1.710061 + 15.09872im 1.247718 - 7.593833im;
    0.000000 + 0.000000im 0.000000 + 0.000000im 10614.70 - 3193.380im 1.247718 - 7.593833im 1.247718 - 7.593833im 1.710061 + 15.09872im;
    1.710061 + 15.09872im 1.247718 - 7.593833im 1.247718 - 7.593833im 10614.70 - 3193.380im 0.000000 + 0.000000im 0.000000 + 0.000000im;
    1.247718 - 7.593833im 1.710061 + 15.09872im 1.247718 - 7.593833im 0.000000 + 0.000000im 10614.70 - 3193.380im 0.000000 + 0.000000im;
    1.247718 - 7.593833im 1.247718 - 7.593833im 1.710061 + 15.09872im 0.000000 + 0.000000im 0.000000 + 0.000000im 10614.70 - 3193.380im
]


A = DDA.interaction_A(k, r, alph)
@test isapprox(A, A_exp; rtol=1e-4)





alph = 1.0e-04 * [
    0.8639 + 0.2599im,
    0.8639 + 0.2599im,
    0.8639 + 0.2599im,
    0.8639 + 0.2599im,
    0.8639 + 0.2599im,
    0.8639 + 0.2599im,
    0.8639 + 0.2599im,
    0.8639 + 0.2599im]
k = 6.283185307179586
E0 = [1, 1, 0]
Ei = reshape([
    0.9306 - 0.3662im,
    0.9306 - 0.3662im,
    0.0000 + 0.0000im,
    0.9306 + 0.3662im,
    0.9306 + 0.3662im,
    0.0000 + 0.0000im,
    0.9306 - 0.3662im,
    0.9306 - 0.3662im,
    0.0000 + 0.0000im,
    0.9306 + 0.3662im,
    0.9306 + 0.3662im,
    0.0000 + 0.0000im,
    0.9306 - 0.3662im,
    0.9306 - 0.3662im,
    0.0000 + 0.0000im,
    0.9306 + 0.3662im,
    0.9306 + 0.3662im,
    0.0000 + 0.0000im,
    0.9306 - 0.3662im,
    0.9306 - 0.3662im,
    0.0000 + 0.0000im,
    0.9306 + 0.3662im,
    0.9306 + 0.3662im,
    0.0000 + 0.0000im], 3,:)
P = reshape(1.0e-04 * [
    0.9612 - 0.0050im,
    0.9612 - 0.0050im,
    0.0309 + 0.0807im,
    0.7006 + 0.7360im,
    0.7006 + 0.7360im,
    -0.0864 - 0.0141im,
    0.8944 - 0.0400im,
    0.8944 - 0.0400im,
    -0.0000 - 0.0000im,
    0.6501 + 0.6763im,
    0.6501 + 0.6763im,
    -0.0000 - 0.0000im,
    0.8944 - 0.0400im,
    0.8944 - 0.0400im,
    -0.0000 - 0.0000im,
    0.6501 + 0.6763im,
    0.6501 + 0.6763im,
    0.0000 + 0.0000im,
    0.9612 - 0.0050im,
    0.9612 - 0.0050im,
    -0.0309 - 0.0807im,
    0.7006 + 0.7360im,
    0.7006 + 0.7360im,
    0.0864 + 0.0141im], 3,:)



x = DDA.C_abs(k, E0, Ei, P, alph)
@test isapprox(x, 0.017431948906466474; atol=1e-6)



k = 6.283185307179586
E0 = [1, 1, 0]
Ei = reshape([
    0.9306 - 0.3662im,
    0.9306 - 0.3662im,
    0.0000 + 0.0000im,
    0.9306 + 0.3662im,
    0.9306 + 0.3662im,
    0.0000 + 0.0000im,
    0.9306 - 0.3662im,
    0.9306 - 0.3662im,
    0.0000 + 0.0000im,
    0.9306 + 0.3662im,
    0.9306 + 0.3662im,
    0.0000 + 0.0000im,
    0.9306 - 0.3662im,
    0.9306 - 0.3662im,
    0.0000 + 0.0000im,
    0.9306 + 0.3662im,
    0.9306 + 0.3662im,
    0.0000 + 0.0000im,
    0.9306 - 0.3662im,
    0.9306 - 0.3662im,
    0.0000 + 0.0000im,
    0.9306 + 0.3662im,
    0.9306 + 0.3662im,
    0.0000 + 0.0000im], 3, :)
P = reshape(1.0e-04 * [
    0.9612 - 0.0050im,
    0.9612 - 0.0050im,
    0.0309 + 0.0807im,
    0.7006 + 0.7360im,
    0.7006 + 0.7360im,
    -0.0864 - 0.0141im,
    0.8944 - 0.0400im,
    0.8944 - 0.0400im,
    -0.0000 - 0.0000im,
    0.6501 + 0.6763im,
    0.6501 + 0.6763im,
    -0.0000 - 0.0000im,
    0.8944 - 0.0400im,
    0.8944 - 0.0400im,
    -0.0000 - 0.0000im,
    0.6501 + 0.6763im,
    0.6501 + 0.6763im,
    0.0000 + 0.0000im,
    0.9612 - 0.0050im,
    0.9612 - 0.0050im,
    -0.0309 - 0.0807im,
    0.7006 + 0.7360im,
    0.7006 + 0.7360im,
    0.0864 + 0.0141im], 3, :)


x = DDA.C_ext(k, E0, Ei, P)
@test isapprox(x, 0.02301281856547211; atol=1e-8)





k = 6.283185307179586
P = reshape([
    8.81460705883819e-05 - 2.85224736997501e-05im,
    3.69106899543797e-06 - 1.87596682467080e-07im,
    3.58903823121609e-06 + 2.62284052969094e-06im,
    8.75820126759164e-05 + 4.78264909627074e-05im,
    3.68160269437733e-06 + 1.23431230590055e-06im,
    -3.78363350590105e-06 + 1.57612509344399e-06im,
    8.81460328021913e-05 - 2.85224592048316e-05im,
    -3.69106986549143e-06 + 1.87597210180722e-07im,
    3.58903782497286e-06 + 2.62284061875806e-06im,
    8.75820134591842e-05 + 4.78264898358523e-05im,
    -3.68160277122829e-06 - 1.23431256395649e-06im,
    -3.78363355413506e-06 + 1.57612498359051e-06im,
    8.81460410139222e-05 - 2.85224611310089e-05im,
    -3.69107012419789e-06 + 1.87597067389693e-07im,
    -3.58903797268349e-06 - 2.62284094500973e-06im,
    8.75820184944987e-05 + 4.78264838410059e-05im,
    -3.68160289742478e-06 - 1.23431270280851e-06im,
    3.78363520780647e-06 - 1.57612528745679e-06im,
    8.81460351221719e-05 - 2.85224595049775e-05im,
    3.69106987781236e-06 - 1.87597248922948e-07im,
    -3.58903819217515e-06 - 2.62284088131637e-06im,
    8.75820159351649e-05 + 4.78264776641933e-05im,
    3.68160394820506e-06 + 1.23431262353497e-06im,
    3.78363423211837e-06 - 1.57612498234861e-06j
],3,:)
r = [
    [-0.0597, -0.0597, -0.0597],
    [-0.0597, -0.0597, 0.0597],
    [-0.0597, 0.0597, -0.0597],
    [-0.0597, 0.0597, 0.0597],
    [0.0597, -0.0597, -0.0597],
    [0.0597, -0.0597, 0.0597],
    [0.0597, 0.0597, -0.0597],
    [0.0597, 0.0597, 0.0597]
]
r_E = [0, 0, 100]

# Note: original teset is wrong
# E_exp = [-3.0238e-05 - 2.8682e-05im, 1.5140e-13 - 2.9974e-13im, 0.0 + 0.0im]
E_exp = [-3.02375512e-04-2.86904400e-05im,  1.51209919e-13+2.99094607e-13im,
        0.00000000e+00+0.00000000e+00im]

E = DDA.E_sca_FF(k, r, P, r_E)

@test isapprox(E, E_exp; rtol=1e-3)



